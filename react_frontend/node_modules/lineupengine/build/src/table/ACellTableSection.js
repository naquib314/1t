var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { ARowRenderer, setTransform } from '../ARowRenderer';
import { EScrollResult } from '../mixin';
import { CSS_CLASS_HIDDEN, CSS_CLASS_LOADING } from '../styles';
import { ACellAdapter } from './internal/ACellAdapter';
/**
 * base class for a cell renderer as table section
 */
var ACellTableSection = /** @class */ (function (_super) {
    __extends(ACellTableSection, _super);
    function ACellTableSection(header, body, tableId, style, options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, body, options) || this;
        _this.header = header;
        _this.body = body;
        _this.tableId = tableId;
        _this.style = style;
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        var that = _this;
        var LocalCell = /** @class */ (function (_super) {
            __extends(LocalCell, _super);
            function LocalCell() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            Object.defineProperty(LocalCell.prototype, "context", {
                get: function () {
                    return that.context;
                },
                enumerable: false,
                configurable: true
            });
            Object.defineProperty(LocalCell.prototype, "body", {
                get: function () {
                    return that.body;
                },
                enumerable: false,
                configurable: true
            });
            Object.defineProperty(LocalCell.prototype, "lastScrollInfo", {
                get: function () {
                    return that.lastScrollInfo;
                },
                enumerable: false,
                configurable: true
            });
            LocalCell.prototype.createHeader = function (document, column) {
                return that.createHeader(document, column);
            };
            LocalCell.prototype.updateHeader = function (node, column) {
                return that.updateHeader(node, column);
            };
            LocalCell.prototype.createCell = function (document, index, column) {
                return that.createCell(document, index, column);
            };
            LocalCell.prototype.updateColumnOffset = function (firstColumnPos) {
                _super.prototype.updateColumnOffset.call(this, firstColumnPos);
                that.updateOffset(that.visibleFirstRowPos);
            };
            LocalCell.prototype.updateCell = function (node, index, column) {
                return that.updateCell(node, index, column);
            };
            LocalCell.prototype.forEachRow = function (callback) {
                return that.forEachRow(callback);
            };
            return LocalCell;
        }(ACellAdapter));
        _this.cell = new LocalCell(_this.header, _this.style, tableId, options.mixins || []);
        return _this;
    }
    ACellTableSection.prototype.addColumnMixin = function (mixinClass, options) {
        this.cell.addColumnMixin(mixinClass, options);
    };
    Object.defineProperty(ACellTableSection.prototype, "idPrefix", {
        get: function () {
            return this.tableId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ACellTableSection.prototype, "width", {
        get: function () {
            return this.context.column.totalHeight;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ACellTableSection.prototype, "visibleColumns", {
        get: function () {
            return this.cell.visibleColumns;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ACellTableSection.prototype, "visibleFirstColumnPos", {
        get: function () {
            return this.cell.visibleFirstColumnPos;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ACellTableSection.prototype, "height", {
        get: function () {
            return this.context.totalHeight;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ACellTableSection.prototype, "hidden", {
        get: function () {
            return this.header.classList.contains(CSS_CLASS_LOADING);
        },
        set: function (value) {
            var old = this.hidden;
            if (old === value) {
                return;
            }
            this.header.classList.toggle(CSS_CLASS_LOADING, value);
            this.body.classList.toggle(CSS_CLASS_LOADING, value);
            this.header.classList.toggle(CSS_CLASS_HIDDEN, value);
            this.body.classList.toggle(CSS_CLASS_HIDDEN, value);
            this.onVisibilityChanged(!value);
        },
        enumerable: false,
        configurable: true
    });
    ACellTableSection.prototype.updateSizer = function (firstRowPos) {
        this.updateShifts(firstRowPos, this.cell.leftShift());
        // no sizer update since centrally managed
    };
    ACellTableSection.prototype.updateShifts = function (top, _left) {
        setTransform(this.body, 0 /* left.toFixed(0) */, top.toFixed(0));
    };
    /**
     * hook when the visibility changes
     * @param {boolean} _visible current visibility
     */
    ACellTableSection.prototype.onVisibilityChanged = function (_visible) {
        // hook
    };
    ACellTableSection.prototype.hide = function () {
        this.hidden = true;
    };
    ACellTableSection.prototype.show = function (scrollLeft, clientWidth, isGoingRight) {
        var wasHidden = this.hidden;
        this.hidden = false;
        if (wasHidden) {
            // full update
            this.revalidate();
        }
        else {
            this.onScrolledHorizontally(scrollLeft, clientWidth, isGoingRight);
        }
    };
    ACellTableSection.prototype.init = function () {
        this.hide(); // hide by default
        this.cell.init();
        _super.prototype.init.call(this);
    };
    ACellTableSection.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        this.header.remove();
        this.style.remove(this.tableId);
    };
    ACellTableSection.prototype.onScrolledVertically = function (scrollTop, clientHeight, isGoingDown) {
        if (this.hidden) {
            return EScrollResult.NONE;
        }
        return _super.prototype.onScrolledVertically.call(this, scrollTop, clientHeight, isGoingDown);
    };
    ACellTableSection.prototype.onScrolledHorizontally = function (scrollLeft, clientWidth, isGoingRight) {
        var r = this.cell.onScrolledHorizontally(scrollLeft, clientWidth, isGoingRight);
        this.updateSizer(this.visibleFirstRowPos);
        return r;
    };
    /**
     * triggers updating the header
     */
    ACellTableSection.prototype.updateHeaders = function () {
        this.cell.updateHeaders();
    };
    ACellTableSection.prototype.handleCellReady = function (item, ready, column) {
        if (column === void 0) { column = -1; }
        return this.cell.handleCellReady(item, ready, column);
    };
    ACellTableSection.prototype.recycleCell = function (item, column) {
        if (column === void 0) { column = -1; }
        this.cell.recycleCell(item, column);
    };
    /**
     * trigger an update all all column widths
     */
    ACellTableSection.prototype.updateColumnWidths = function () {
        var context = this.context;
        this.style.update(context.defaultRowHeight - context.padding(-1), context.columns, context.column.padding, 0, this.tableId);
    };
    ACellTableSection.prototype.recreate = function (ctx) {
        var scroller = this.bodyScroller;
        var oldLeft = scroller.scrollLeft;
        this.cell.recreate(oldLeft, scroller.clientWidth);
        _super.prototype.recreate.call(this, ctx);
        // restore left
        scroller.scrollLeft = oldLeft;
    };
    ACellTableSection.prototype.clearPool = function () {
        _super.prototype.clearPool.call(this);
        this.cell.clearPool();
    };
    ACellTableSection.prototype.createRow = function (node, rowIndex) {
        this.cell.createRow(node, rowIndex);
        node.classList.add(this.style.cssClasses.tr);
    };
    ACellTableSection.prototype.updateRow = function (node, rowIndex) {
        this.cell.updateRow(node, rowIndex);
    };
    return ACellTableSection;
}(ARowRenderer));
export { ACellTableSection };
export default ACellTableSection;
//# sourceMappingURL=ACellTableSection.js.map