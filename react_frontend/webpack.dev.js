const merge = require("webpack-merge");
const common = require("./webpack.common.js");

module.exports = merge({
  customizeObject(commonObj, devObj, key) {
    if (key === "module") {
      return {
        ...commonObj,
        rules: commonObj.rules.map((rule) => {
          if (Array.isArray(rule.use)) {
            return {
              ...rule,
              use: rule.use.map((useEntry) => {
                return useEntry.loader === "css-loader"
                  ? {
                      ...useEntry,
                      options: {
                        ...useEntry.options,
                        localIdentName: devObj.localIdentName,
                      },
                    }
                  : useEntry;
              }),
            };
          }

          return rule;
        }),
      };
    }
  },
})(common, {
  mode: "development",
  // SourceMaps help you debug by allowing the browser to display your code as
  // it looked before being transformed by, for instance, the TypeScript
  // compiler.
  // There is a dizzying array of options for this. It's all about striking a
  // balance between speedy rebuilds and the accuracy of the SourceMaps (e.g.
  // do they you show you the exact column where an error occurred or just the
  // line?)
  // This option is actually fairly slow but yields high accuracy. I went with
  // it because it's what create-react-app does. Consider changing it if dev
  // mode rebuilds are too slow.
  // https://v4.webpack.js.org/configuration/devtool/
  devtool: "cheap-module-source-map",
  output: {
    filename: "[name].js",
  },
  devServer: {
    publicPath: "/depmap/static/webpack",
    port: 5001,
    hot: true,
    // We need to enable cross-origin requests to the dev server since it's
    // running on localhost:5001 while Flask is on localhost:5000 (the port is
    // considered part of the origin).
    headers: {
      "Access-Control-Allow-Origin": "http://127.0.0.1:5000",
      "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, PATCH, OPTIONS",
      "Access-Control-Allow-Headers":
        "X-Requested-With, content-type, Authorization",
    },
  },
  resolve: {
    alias: {
      // This makes `import "react-dom"` actually resolve to "@hot-loader/react-dom".
      // It's a drop-in replacement but with some patches to better support hot reloading.
      // https://github.com/gaearon/react-hot-loader/blob/ed8b310/README.md#hot-loaderreact-dom
      "react-dom": "@hot-loader/react-dom",
    },
  },
  module: {
    // HACK: We only want to customize this one property in dev mode. It makes
    // the class names generated by CSS modules human-readable. This is looked
    // up and merged into the appropriate rule by customizeObject() above.
    // https://webpack.js.org/loaders/css-loader/#localidentname
    localIdentName: "[path][name]__[local]",
  },
});
