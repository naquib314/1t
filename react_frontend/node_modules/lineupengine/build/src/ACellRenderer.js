var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { ARowRenderer, setTransform } from './ARowRenderer';
import { addScroll } from './internal';
import { GridStyleManager, setTemplate } from './style';
import { cssClass } from './styles';
import { ACellAdapter } from './table/internal/ACellAdapter';
/**
 * a @see ARowRenderer which manages multiple columns per row
 */
var ACellRenderer = /** @class */ (function (_super) {
    __extends(ACellRenderer, _super);
    function ACellRenderer(root, htmlId, options) {
        if (options === void 0) { options = {}; }
        var _this = 
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        _super.call(this, setTemplate(root, htmlId).querySelector('main > article'), options) || this;
        _this.root = root;
        root.classList.add(cssClass(), 'lineup-engine');
        _this.style = new GridStyleManager(_this.root, htmlId);
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        var that = _this;
        var LocalCell = /** @class */ (function (_super) {
            __extends(LocalCell, _super);
            function LocalCell() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            Object.defineProperty(LocalCell.prototype, "context", {
                get: function () {
                    return that.context;
                },
                enumerable: false,
                configurable: true
            });
            Object.defineProperty(LocalCell.prototype, "body", {
                get: function () {
                    return that.body;
                },
                enumerable: false,
                configurable: true
            });
            Object.defineProperty(LocalCell.prototype, "lastScrollInfo", {
                get: function () {
                    return that.lastScrollInfo;
                },
                enumerable: false,
                configurable: true
            });
            LocalCell.prototype.createHeader = function (document, column) {
                return that.createHeader(document, column);
            };
            LocalCell.prototype.updateHeader = function (node, column) {
                return that.updateHeader(node, column);
            };
            LocalCell.prototype.createCell = function (document, index, column) {
                return that.createCell(document, index, column);
            };
            LocalCell.prototype.updateCell = function (node, index, column) {
                return that.updateCell(node, index, column);
            };
            LocalCell.prototype.updateColumnOffset = function (firstColumnPos) {
                _super.prototype.updateColumnOffset.call(this, firstColumnPos);
                that.updateOffset(that.visibleFirstRowPos);
            };
            LocalCell.prototype.forEachRow = function (callback) {
                return that.forEachRow(callback);
            };
            return LocalCell;
        }(ACellAdapter));
        _this.cell = new LocalCell(_this.header, _this.style, _this.style.id, options.mixins || []);
        return _this;
    }
    Object.defineProperty(ACellRenderer.prototype, "idPrefix", {
        get: function () {
            return this.style.id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ACellRenderer.prototype, "header", {
        /**
         * get the header root element
         */
        get: function () {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            return this.root.querySelector('header > article');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ACellRenderer.prototype, "headerScroller", {
        /**
         * get the header scrolling element, i.e its parent
         */
        get: function () {
            return this.root.getElementsByTagName('header')[0];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ACellRenderer.prototype, "visibleColumns", {
        get: function () {
            return this.cell.visibleColumns;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ACellRenderer.prototype, "visibleFirstColumnPos", {
        get: function () {
            return this.cell.visibleFirstColumnPos;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * add another column mixin
     * @param {IMixinClass} mixinClass mixing class to instantiate
     * @param options optional options
     */
    ACellRenderer.prototype.addColumnMixin = function (mixinClass, options) {
        this.cell.addColumnMixin(mixinClass, options);
    };
    /**
     * initialized this renderer
     */
    ACellRenderer.prototype.init = function () {
        var _this = this;
        this.cell.init();
        var scroller = this.body.parentElement;
        var old = addScroll(scroller, this.options.async, function (act) {
            if (Math.abs(old.left - act.left) < _this.options.minScrollDelta &&
                Math.abs(old.width - act.width) < _this.options.minScrollDelta) {
                return;
            }
            var isGoingRight = act.left > old.left;
            old = act;
            _this.onScrolledHorizontally(act.left, act.width, isGoingRight);
        });
        _super.prototype.init.call(this);
    };
    ACellRenderer.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        this.root.remove();
    };
    /**
     * will be called when scrolled horizontally
     * @param {number} scrollLeft
     * @param {number} clientWidth
     * @param {boolean} isGoingRight
     * @returns {EScrollResult}
     */
    ACellRenderer.prototype.onScrolledHorizontally = function (scrollLeft, clientWidth, isGoingRight) {
        return this.cell.onScrolledHorizontally(scrollLeft, clientWidth, isGoingRight);
    };
    /**
     * trigger to update all headers
     */
    ACellRenderer.prototype.updateHeaders = function () {
        this.cell.updateHeaders();
    };
    ACellRenderer.prototype.handleCellReady = function (item, ready, column) {
        if (column === void 0) { column = -1; }
        return this.cell.handleCellReady(item, ready, column);
    };
    ACellRenderer.prototype.recycleCell = function (item, column) {
        if (column === void 0) { column = -1; }
        this.cell.recycleCell(item, column);
    };
    /**
     * triggers to update all column widths
     */
    ACellRenderer.prototype.updateColumnWidths = function () {
        var context = this.context;
        this.style.update(context.defaultRowHeight - context.padding(-1), context.columns, context.column.padding, 0, this.idPrefix);
    };
    ACellRenderer.prototype.updateSizer = function (firstRowPos) {
        var ctx = this.context;
        var totalHeight = ctx.totalHeight;
        var totalWidth = ctx.column.totalHeight;
        this.updateShifts(firstRowPos, this.cell.leftShift());
        this.bodySizer.style.transform = "translate(".concat(Math.max(0, totalWidth - 1).toFixed(0), "px, ").concat(Math.max(0, totalHeight - 1).toFixed(0), "px)");
    };
    ACellRenderer.prototype.updateShifts = function (top, _left) {
        setTransform(this.body, 0 /* left.toFixed(0) */, top.toFixed(0));
    };
    /**
     * triggers to recreate the whole table
     * @param {IAnimationContext} ctx optional animation context
     */
    ACellRenderer.prototype.recreate = function (ctx) {
        var scroller = this.bodyScroller;
        var oldLeft = scroller.scrollLeft;
        this.cell.recreate(oldLeft, scroller.clientWidth);
        _super.prototype.recreate.call(this, ctx);
        // restore left
        scroller.scrollLeft = oldLeft;
    };
    ACellRenderer.prototype.clearPool = function () {
        _super.prototype.clearPool.call(this);
        this.cell.clearPool();
    };
    ACellRenderer.prototype.createRow = function (node, rowIndex) {
        this.cell.createRow(node, rowIndex);
    };
    ACellRenderer.prototype.updateRow = function (node, rowIndex) {
        this.cell.updateRow(node, rowIndex);
    };
    return ACellRenderer;
}(ARowRenderer));
export { ACellRenderer };
export default ACellRenderer;
//# sourceMappingURL=ACellRenderer.js.map