import { IExceptionContext } from '../logic';
import KeyFinder from './KeyFinder';
export { default as KeyFinder } from './KeyFinder';
/**
 * different row animation modes
 */
export declare enum EAnimationMode {
    /**
     * plain update existed both before and after
     */
    UPDATE = 0,
    /**
     * exists both before and after but wasn't visible yet thus was created
     */
    UPDATE_CREATE = 1,
    /**
     * exists both before and after is visible but not needed anymore and thus removed
     */
    UPDATE_REMOVE = 2,
    /**
     * row appears
     */
    SHOW = 3,
    /**
     * row disappears
     */
    HIDE = 4
}
/**
 * animated row item
 */
export interface IAnimationItem {
    mode: EAnimationMode;
    node: HTMLElement;
    key: string;
    /**
     * previous context information
     */
    previous: {
        index: number | -1;
        y: number;
        height: number | null;
    };
    /**
     * position of the added node considering the previous height
     */
    nodeY: number;
    /**
     * position of the added node considering the current height
     */
    nodeYCurrentHeight: number;
    /**
     * current position
     */
    current: {
        index: number | -1;
        y: number;
        height: number | null;
    };
}
export declare function noAnimationChange({ previous, mode, nodeY, current }: IAnimationItem, previousHeight: number, currentHeight: number): boolean;
export interface IPhase {
    readonly delay: number;
    apply(item: Readonly<IAnimationItem>, previousFinder: KeyFinder, currentFinder: KeyFinder): void;
}
export interface IAnimationContext {
    readonly previous: IExceptionContext;
    previousKey(previousRowIndex: number): string;
    currentKey(currentRowIndex: number): string;
    phases?: IPhase[];
}
export declare const defaultPhases: {
    delay: number;
    apply({ mode, previous, nodeY, current, node }: Readonly<IAnimationItem>): void;
}[];
//# sourceMappingURL=index.d.ts.map