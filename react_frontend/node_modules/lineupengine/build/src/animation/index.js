export { default as KeyFinder } from './KeyFinder';
/**
 * different row animation modes
 */
export var EAnimationMode;
(function (EAnimationMode) {
    /**
     * plain update existed both before and after
     */
    EAnimationMode[EAnimationMode["UPDATE"] = 0] = "UPDATE";
    /**
     * exists both before and after but wasn't visible yet thus was created
     */
    EAnimationMode[EAnimationMode["UPDATE_CREATE"] = 1] = "UPDATE_CREATE";
    /**
     * exists both before and after is visible but not needed anymore and thus removed
     */
    EAnimationMode[EAnimationMode["UPDATE_REMOVE"] = 2] = "UPDATE_REMOVE";
    /**
     * row appears
     */
    EAnimationMode[EAnimationMode["SHOW"] = 3] = "SHOW";
    /**
     * row disappears
     */
    EAnimationMode[EAnimationMode["HIDE"] = 4] = "HIDE";
})(EAnimationMode || (EAnimationMode = {}));
var NO_CHANGE_DELTA = 1;
export function noAnimationChange(_a, previousHeight, currentHeight) {
    var previous = _a.previous, mode = _a.mode, nodeY = _a.nodeY, current = _a.current;
    // sounds like the same
    var prev = previous.height == null ? previousHeight : previous.height;
    var curr = current.height == null ? currentHeight : current.height;
    return (mode === EAnimationMode.UPDATE &&
        Math.abs(previous.y - nodeY) <= NO_CHANGE_DELTA &&
        Math.abs(prev - curr) <= NO_CHANGE_DELTA);
}
/**
 * maximal duration of all animations + extra waiting before e.g. rows are really removed
 * @type {number}
 */
var MAX_ANIMATION_TIME = 1100;
export var defaultPhases = [
    {
        delay: 0,
        apply: function (_a) {
            var mode = _a.mode, previous = _a.previous, nodeY = _a.nodeY, current = _a.current, node = _a.node;
            var actNode = node;
            actNode.dataset.animation = EAnimationMode[mode].toLowerCase();
            actNode.style.transform = "translate(0, ".concat(previous.y - nodeY, "px)");
            if (mode === EAnimationMode.SHOW) {
                // already target height
                actNode.style.height = current.height !== null ? "".concat(current.height, "px") : '';
            }
            else {
                // always set previous height for default height changes
                actNode.style.height = "".concat(previous.height, "px");
            }
            if (mode === EAnimationMode.SHOW) {
                actNode.style.opacity = '0';
            }
            else if (mode === EAnimationMode.HIDE) {
                actNode.style.opacity = '1';
            }
            else {
                actNode.style.opacity = '';
            }
        },
    },
    {
        delay: 10,
        apply: function (_a) {
            var mode = _a.mode, current = _a.current, nodeY = _a.nodeY, node = _a.node;
            var actNode = node;
            // null for added/update since already at the right position
            actNode.style.transform =
                mode === EAnimationMode.HIDE || mode === EAnimationMode.UPDATE_REMOVE
                    ? "translate(0, ".concat(current.y - nodeY, "px)")
                    : '';
            if (mode !== EAnimationMode.HIDE) {
                // keep height for removal
                actNode.style.height = current.height !== null ? "".concat(current.height, "px") : '';
            }
            if (mode === EAnimationMode.SHOW) {
                actNode.style.opacity = '1';
            }
            else if (mode === EAnimationMode.HIDE) {
                actNode.style.opacity = '0';
            }
            else {
                actNode.style.opacity = '';
            }
        },
    },
    {
        delay: MAX_ANIMATION_TIME,
        apply: function (_a) {
            var node = _a.node;
            var actNode = node;
            delete actNode.dataset.animation;
            actNode.style.opacity = '';
            actNode.style.transform = '';
        },
    },
];
//# sourceMappingURL=index.js.map