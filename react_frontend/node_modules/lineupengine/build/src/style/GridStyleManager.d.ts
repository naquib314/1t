import StyleManager from './StyleManager';
export declare function setTemplate(root: HTMLElement, id: string): HTMLElement;
/**
 * column base interface
 */
export interface IColumn {
    readonly index: number;
    readonly id: string;
    readonly width: number;
    /**
     * boolean flag whether when scrolling the column should be sticky
     */
    readonly frozen: boolean;
}
interface ISelectors {
    thead: string;
    tbody: string;
    tr: string;
    th: string;
    td: string;
}
/**
 * generates the HTML Ids used for the header and body article of a table
 * @param {string} tableId base table id
 * @param {boolean} asSelector flag whether to prepend with # for CSS selector
 * @return {ISelectors} the table ids used for header and body
 */
export declare function tableIds(tableId: string): {
    thead: string;
    tbody: string;
    tr: string;
    th: string;
    td: string;
};
export declare function tableCSSClasses(tableId: string): {
    thead: string;
    tbody: string;
    tr: string;
    th: string;
    td: string;
};
/**
 * utility for custom generated CSS rules with a focus on dynamically generated grid layouts
 */
export default class GridStyleManager extends StyleManager {
    readonly id: string;
    readonly ids: ISelectors;
    readonly cssClasses: ISelectors;
    constructor(root: HTMLElement, id: string);
    /**
     * updates the column widths and default row height for a table
     * @param {number} defaultRowHeight
     * @param {IColumn[]} columns
     * @param {number} frozenShift shift frozen columns
     * @param {string} tableId optional tableId in case of multiple tables within the same engine
     * @param {string} unit
     */
    update(defaultRowHeight: number, columns: IColumn[], padding: (index: number) => number, frozenShift: number, tableId: string, unit?: string): void;
    /**
     * removes a given tableId if not needed anymore
     * @param {string} tableId tableId to remove
     */
    remove(tableId: string): void;
    private updateColumns;
}
export {};
//# sourceMappingURL=GridStyleManager.d.ts.map