var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import MenuList from './MenuList';
import * as React from 'react';
import Select from 'react-select';
import { calcOptionsLength } from './util';
function WindowedSelect(_a, ref) {
    var _b = _a.windowThreshold, windowThreshold = _b === void 0 ? 100 : _b, passedProps = __rest(_a, ["windowThreshold"]);
    var optionsLength = React.useMemo(function () { return calcOptionsLength(passedProps.options); }, [passedProps.options]);
    var isWindowed = optionsLength >= windowThreshold;
    return (React.createElement(Select, __assign({}, passedProps, { components: __assign(__assign({}, passedProps.components), (isWindowed
            ? { MenuList: MenuList }
            : {})), ref: ref })));
}
export default React.forwardRef(WindowedSelect);
//# sourceMappingURL=WindowedSelect.js.map