export default class StyleManager {
    private readonly rules;
    private readonly node;
    private testVerifyTimeout;
    /**
     * the parent element to append this managed style
     * @param {HTMLElement} root
     */
    constructor(root: HTMLElement);
    destroy(): void;
    private verifySheet;
    private get sheet();
    private getSheetRule;
    /**
     * add a custom css rule
     * @param {string} id unique id of the rule for later identification
     * @param {string} selector the css selector
     * @param {Partial<CSSStyleDeclaration>} style the style attributes
     * @returns {string} the id again
     */
    addRule(id: string, selector: string, style: Partial<CSSStyleDeclaration>): string | null;
    /**
     * updates or add a rule, see @addRule
     * @param {string} id unique id of the rule for later identification
     * @param {string} selector the css selector
     * @param {Partial<CSSStyleDeclaration>} style the style attributes
     * @returns {string} the id again
     */
    updateRule(id: string, selector: string, style: Partial<CSSStyleDeclaration>): string | null;
    /**
     * deletes the given rule by id
     * @param {string} id the rule to delete
     */
    deleteRule(id: string): void;
    /**
     * get a list of all registered rule ids
     */
    protected get ruleNames(): string[];
}
//# sourceMappingURL=StyleManager.d.ts.map