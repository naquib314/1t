import { IExceptionContext } from '../logic';
/**
 * utility class for optimized row context access
 */
export default class KeyFinder {
    readonly context: IExceptionContext;
    readonly key: (rowIndex: number) => string;
    private readonly cache;
    private lastFilled;
    private readonly key2index;
    /**
     * constructor for fast key based row access
     * @param {IExceptionContext} context context to use
     * @param {(rowIndex: number) => string} key key function
     */
    constructor(context: IExceptionContext, key: (rowIndex: number) => string);
    private findValidStart;
    /**
     * returns the position of the given given or -1 if not found
     * @param {string} key
     */
    posByKey(key: string): {
        index: number;
        pos: number;
    };
    /**
     * returns the position of the given index
     * @param {number} index index to look for
     */
    pos(index: number): number;
    private fillCache;
    /**
     * returns the height of the row identified by index
     * @param {number} index
     */
    heightOf(index: number): number;
    /**
     * see heightOf but ignores padding and optional null in case of default height
     * @param {number} index row index
     * @param {boolean} returnDefault return null if default height
     * @returns {number}
     */
    exceptionHeightOf(index: number, returnDefault?: boolean): number | null;
    exceptionHeightOf(index: number, returnDefault: true): number;
    /**
     * padding of the given index
     * @param {number} index
     * @returns {number}
     */
    padding(index: number): number;
    private fillCacheTillKey;
    /**
     * computes the positions and keys for a range of given indices
     * @param {number} first first row index
     * @param {number} last last row index
     * @param {number} offset pos offset for the first row index
     * @param {(index: number, key: string, pos: number) => void} callback callback for each identified index
     */
    positions(first: number, last: number, offset: number, callback?: (index: number, key: string, pos: number) => void): void;
}
//# sourceMappingURL=KeyFinder.d.ts.map