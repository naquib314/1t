var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
export function isPromiseLike(p) {
    return p != null && typeof p.then === 'function';
}
/**
 * the symbol returned when the promise was aborted
 */
export var ABORTED = Symbol('aborted');
function thenFactory(loader, isAborted, abort) {
    function then(onfulfilled, _onrejected) {
        var fullfiller = loader.then(function (loaded) {
            var loadedOrAborted = isAborted() ? ABORTED : loaded;
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var res = onfulfilled ? onfulfilled(loadedOrAborted) : loadedOrAborted;
            if (isPromiseLike(res)) {
                return res.then(function (r) {
                    return isAborted() ? ABORTED : r;
                });
            }
            return isAborted() ? ABORTED : res;
        });
        return {
            then: thenFactory(fullfiller, isAborted, abort),
            abort: abort,
            isAborted: isAborted,
        };
    }
    return then;
}
/**
 * abort able Promise wrapper, returns a promise which can be aborted, and trying to avoid executing therefore the wrapped promise
 * @param {Promise<T>} loader
 * @returns {any}
 */
export default function abortAble(loader) {
    var aborted = null;
    var isAborted = function () { return aborted === null; };
    var aborter = new Promise(function (resolve) {
        aborted = resolve;
    });
    var abort = function () {
        if (aborted == null) {
            return;
        }
        aborted(ABORTED);
        aborted = null;
    };
    var race = Promise.race([aborter, loader]);
    return {
        then: thenFactory(race, isAborted, abort),
        abort: abort,
        isAborted: isAborted,
    };
}
export function abortAbleFetch(input, init) {
    var controller = new AbortController();
    var race = new Promise(function (resolve, reject) {
        var r = fetch(input, __assign({ signal: controller.signal }, (init || {})));
        r.then(resolve);
        r.catch(function (error) {
            if (error instanceof DOMException) {
                resolve(ABORTED);
            }
            else {
                reject(error);
            }
        });
    });
    var abort = controller.abort.bind(controller);
    var isAborted = function () { return controller.signal.aborted; };
    return {
        then: thenFactory(race, isAborted, abort),
        abort: abort,
        isAborted: isAborted,
    };
}
/**
 * similar to Promise.all but for abortAble
 */
export function abortAbleAll(values) {
    var loader = Promise.all(values);
    var aborted = null;
    var isAborted = function () { return aborted === null; };
    var aborter = new Promise(function (resolve) {
        aborted = resolve;
    });
    var abort = function () {
        if (aborted == null) {
            return;
        }
        aborted(ABORTED);
        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
            var v = values_1[_i];
            if (isAbortAble(v)) {
                v.abort();
            }
        }
        aborted = null;
    };
    var race = Promise.race([aborter, loader]);
    return {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        then: thenFactory(race, isAborted, abort),
        abort: abort,
        isAborted: isAborted,
    };
}
/**
 * checked whether the given argument is an abortable Promise
 * @param {IAbortAblePromise<any> | any} candidate
 * @returns {boolean}
 */
export function isAbortAble(candidate) {
    return (candidate != null &&
        candidate &&
        typeof candidate.then === 'function' &&
        typeof candidate.abort === 'function');
}
export function isAsyncUpdate(update) {
    return update !== undefined && update !== null && update && isAbortAble(update.ready);
}
/**
 * similar to Promise.resolve
 */
export function abortAbleResolveNow(value) {
    function then(onfulfilled, _onrejected) {
        var res = onfulfilled ? onfulfilled(value) : value;
        if (isAbortAble(res)) {
            return res;
        }
        if (isPromiseLike(res)) {
            return abortAble(res);
        }
        return {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            then: abortAbleResolveNow(res),
            abort: function () { return undefined; },
            isAborted: function () { return false; },
        };
    }
    return {
        then: then,
        abort: function () { return undefined; },
        isAborted: function () { return false; },
    };
}
//# sourceMappingURL=abortAble.js.map