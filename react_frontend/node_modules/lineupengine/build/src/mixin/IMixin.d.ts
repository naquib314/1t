import type { IExceptionContext } from '../logic';
/**
 * scrolling result
 */
export declare enum EScrollResult {
    /**
     * nothing has changed
     */
    NONE = 0,
    /**
     * all rows needed to be recreated
     */
    ALL = 1,
    /**
     * unknown
     */
    SOME = 2,
    /**
     * some rows are added at the bottom
     */
    SOME_BOTTOM = 3,
    /**
     * some rows are added at the top
     */
    SOME_TOP = 4
}
/**
 * adapter context for mixins to avoid public fields
 */
export interface IMixinAdapter {
    readonly visible: {
        first: number;
        last: number;
        forcedFirst: number;
        forcedLast: number;
    };
    readonly visibleFirstRowPos: number;
    readonly context: IExceptionContext;
    readonly scrollOffset: number;
    readonly scrollTotal: number;
    addAtBeginning(from: number, to: number, frozenShift: number): void;
    addAtBottom(from: number, to: number): void;
    removeFromBeginning(from: number, to: number, frozenShift: number): void;
    removeFromBottom(from: number, to: number): void;
    updateOffset(firstRowPos: number): void;
    /**
     * triggers to sync frozen items
     * @param {number} first
     * @return {number} frozenShift
     */
    syncFrozen?(first: number): number;
    isScrollEventWaiting(): boolean;
}
export interface IMixin {
    onScrolled(isGoingDown: boolean, scrollResult: EScrollResult): void;
}
export interface IMixinClass {
    new (adapter: IMixinAdapter, options?: unknown): IMixin;
}
//# sourceMappingURL=IMixin.d.ts.map