var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { addScroll } from '../internal';
import { cssClass, CSS_CLASS_BODY, CSS_CLASS_FOOTER, CSS_CLASS_HEADER, CSS_CLASS_SCROLLBAR_TESTER, CSS_CLASS_SHIFTED, CSS_CLASS_TBODY, CSS_CLASS_THEAD, } from '../styles';
import StyleManager from './StyleManager';
export function setTemplate(root, id) {
    var cleanId = id.startsWith('#') ? id.slice(1) : id;
    // eslint-disable-next-line no-param-reassign
    root.innerHTML = "\n  <header id=\"header-".concat(cleanId, "\" class=\"").concat(CSS_CLASS_HEADER, " ").concat(cssClass("header-".concat(cleanId)), "\">\n    <article class=\"").concat(CSS_CLASS_THEAD, " ").concat(cssClass("thead-".concat(cleanId)), "\"></article>\n  </header>\n  <main id=\"body-").concat(cleanId, "\" class=\"").concat(CSS_CLASS_BODY, " ").concat(cssClass("body-".concat(cleanId)), "\">\n    <footer class=\"").concat(CSS_CLASS_FOOTER, "\">&nbsp;</footer>\n    <article class=\"").concat(CSS_CLASS_TBODY, " ").concat(cssClass("tbody-".concat(cleanId)), "\"></article>\n  </main>");
    return root;
}
/**
 * generates the HTML Ids used for the header and body article of a table
 * @param {string} tableId base table id
 * @param {boolean} asSelector flag whether to prepend with # for CSS selector
 * @return {ISelectors} the table ids used for header and body
 */
export function tableIds(tableId) {
    return {
        thead: "thead-".concat(tableId),
        tbody: "tbody-".concat(tableId),
        tr: "tr-".concat(tableId),
        th: "th-".concat(tableId),
        td: "td-".concat(tableId),
    };
}
export function tableCSSClasses(tableId) {
    var ids = tableIds(tableId);
    return {
        thead: cssClass(ids.thead),
        tbody: cssClass(ids.tbody),
        tr: cssClass(ids.tr),
        th: cssClass(ids.th),
        td: cssClass(ids.td),
    };
}
/**
 * utility for custom generated CSS rules with a focus on dynamically generated grid layouts
 */
var GridStyleManager = /** @class */ (function (_super) {
    __extends(GridStyleManager, _super);
    function GridStyleManager(root, id) {
        var _this = _super.call(this, root) || this;
        _this.id = id.startsWith('#') ? id.slice(1) : id;
        _this.ids = tableIds(_this.id);
        _this.cssClasses = tableCSSClasses(_this.id);
        var headerScroller = root.getElementsByTagName('header')[0];
        var bodyScroller = root.getElementsByTagName('main')[0];
        // async since style needs to be added to dom first
        // eslint-disable-next-line no-restricted-globals
        self.setTimeout(function () {
            var width = measureScrollbar(root).width;
            _this.updateRule('__scrollBarFix2', "#header-".concat(_this.id, " > article:last-of-type"), {
                borderRight: "".concat(width, "px solid transparent"),
            });
        }, 20);
        var old = headerScroller.scrollLeft;
        // update frozen and sync header with body
        addScroll(bodyScroller, 'animation', function (act) {
            var newValue = act.left;
            if (old !== newValue) {
                headerScroller.scrollLeft = newValue;
                old = newValue;
            }
            root.classList.toggle(CSS_CLASS_SHIFTED, act.left > 0);
        });
        return _this;
    }
    /**
     * updates the column widths and default row height for a table
     * @param {number} defaultRowHeight
     * @param {IColumn[]} columns
     * @param {number} frozenShift shift frozen columns
     * @param {string} tableId optional tableId in case of multiple tables within the same engine
     * @param {string} unit
     */
    GridStyleManager.prototype.update = function (defaultRowHeight, columns, padding, frozenShift, tableId, unit) {
        if (unit === void 0) { unit = 'px'; }
        var ids = tableIds(tableId);
        var selectors = tableCSSClasses(tableId);
        var total = "".concat(columns.reduce(function (a, b, i) { return a + b.width + padding(i); }, 0)).concat(unit);
        this.updateRule("__heightsRule".concat(selectors.tr), ".".concat(selectors.tr), {
            height: "".concat(defaultRowHeight, "px"),
            width: total,
        });
        this.updateRule("__heightsRule".concat(selectors.tbody), "#".concat(ids.tbody), {
            width: total,
        });
        this.updateColumns(columns, padding, selectors, frozenShift, unit);
    };
    /**
     * removes a given tableId if not needed anymore
     * @param {string} tableId tableId to remove
     */
    GridStyleManager.prototype.remove = function (tableId) {
        var selectors = tableCSSClasses(tableId);
        this.deleteRule("__heightsRule".concat(selectors.tr));
        this.deleteRule("__heightsRule".concat(selectors.tbody));
        var prefix = "__col".concat(selectors.td, "_");
        var rules = this.ruleNames.reduce(function (a, b) { return a + (b.startsWith(prefix) ? 1 : 0); }, 0);
        // reset
        for (var i = 0; i < rules; i += 1) {
            this.deleteRule("".concat(prefix).concat(i));
        }
    };
    GridStyleManager.prototype.updateColumns = function (columns, padding, cssSelectors, frozenShift, unit) {
        var _this = this;
        if (unit === void 0) { unit = 'px'; }
        var prefix = "__col".concat(cssSelectors.td, "_");
        var rules = new Set(this.ruleNames.filter(function (d) { return d.startsWith(prefix); }));
        var acc = 0;
        columns.forEach(function (c, i) {
            var th = ".".concat(cssSelectors.th, "[data-id=\"").concat(c.id, "\"]");
            var thStyles = {
                width: "".concat(c.width).concat(unit),
            };
            var td = ".".concat(cssSelectors.td, "[data-id=\"").concat(c.id, "\"]");
            var tdStyles = {
                transform: "translateX(".concat(acc).concat(unit, ")"),
                width: "".concat(c.width).concat(unit),
            };
            if (c.frozen) {
                thStyles.left = "".concat(acc, "px");
                _this.updateRule("".concat(prefix).concat(td, "F"), ".".concat(cssSelectors.td, ".").concat(CSS_CLASS_SHIFTED, "[data-id=\"").concat(c.id, "\"]"), {
                    transform: "translateX(0)",
                    left: "".concat(acc + frozenShift).concat(unit),
                });
                rules.delete("".concat(prefix).concat(td, "F"));
            }
            _this.updateRule("".concat(prefix).concat(th), th, thStyles);
            rules.delete("".concat(prefix).concat(th));
            _this.updateRule("".concat(prefix).concat(td), td, tdStyles);
            rules.delete("".concat(prefix).concat(td));
            acc += c.width + padding(i);
        });
        rules.forEach(function (d) { return _this.deleteRule(d); });
    };
    return GridStyleManager;
}(StyleManager));
export default GridStyleManager;
/**
 * measure the width and height of the scrollbars
 * based on Slick grid implementation
 * @param root
 */
function measureScrollbar(root) {
    var _a;
    var body = (_a = root.ownerDocument) === null || _a === void 0 ? void 0 : _a.body;
    if (!body) {
        return { width: 10, height: 10 };
    }
    body.insertAdjacentHTML('beforeend', "<div class=\"".concat(CSS_CLASS_SCROLLBAR_TESTER, "\"><div></div></div>"));
    var elem = body.lastElementChild;
    var width = elem.offsetWidth - elem.clientWidth;
    var height = elem.offsetHeight - elem.clientHeight;
    elem.remove();
    return { width: width, height: height };
}
//# sourceMappingURL=GridStyleManager.js.map