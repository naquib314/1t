var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
import * as React from 'react';
export function calcOptionsLength(options) {
    options = options || [];
    var head = options[0] || {};
    var isGrouped = head.options !== undefined;
    return isGrouped
        ? options.reduce(function (result, group) { return result + group.options.length; }, 0)
        : options.length;
}
export function flattenGroupedChildren(children) {
    return children.reduce(function (result, child) {
        var _a = child.props.children, nestedChildren = _a === void 0 ? [] : _a;
        return __spreadArray(__spreadArray(__spreadArray([], result), [
            React.cloneElement(child, { type: 'group' }, [])
        ]), nestedChildren);
    }, []);
}
export function isFocused(_a) {
    var isFocused = _a.props.isFocused;
    return isFocused === true;
}
export function getCurrentIndex(children) {
    return Math.max(children.findIndex(isFocused), 0);
}
export function createGetHeight(_a) {
    var groupHeadingStyles = _a.groupHeadingStyles, noOptionsMsgStyles = _a.noOptionsMsgStyles, optionStyles = _a.optionStyles, loadingMsgStyles = _a.loadingMsgStyles;
    return function getHeight(child) {
        var _a = child.props, type = _a.type, children = _a.children, inputValue = _a.inputValue, _b = _a.selectProps, noOptionsMessage = _b.noOptionsMessage, loadingMessage = _b.loadingMessage;
        if (type === 'group') {
            var _c = groupHeadingStyles.height, height = _c === void 0 ? 25 : _c;
            return height;
        }
        else if (type === 'option') {
            var _d = optionStyles.height, height = _d === void 0 ? 35 : _d;
            return height;
        }
        else if (typeof noOptionsMessage === 'function' && children === noOptionsMessage({ inputValue: inputValue })) {
            var _e = noOptionsMsgStyles.height, height = _e === void 0 ? 35 : _e;
            return height;
        }
        else if (typeof loadingMessage === 'function' && children === loadingMessage({ inputValue: inputValue })) {
            var _f = loadingMsgStyles.height, height = _f === void 0 ? 35 : _f;
            return height;
        }
        else {
            return 35;
        }
    };
}
export var sum = function (a, b) { return a + b; };
//# sourceMappingURL=util.js.map